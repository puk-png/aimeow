import requests
import json
import sqlite3
import threading
import time
from datetime import datetime, timedelta
import calendar
import logging
import re

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –í–ê–ñ–õ–ò–í–û: –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω!
API_TOKEN = "8046378279:AAEjTOBDflR7gQufceQWgwTsr-gWzD1_Xxk"
BASE_URL = f"https://api.telegram.org/bot{API_TOKEN}"

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
user_states = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}    # –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
reminders_thread = # --- –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤ ---
def handle_callback_query(callback_query):
    try:
        chat_id = callback_query['message']['chat']['id']
        message_id = callback_query['message']['message_id']
        user_id = callback_query['from']['id']
        data = callback_query['data']
        
        # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        if data == 'main_menu':
            clear_user_state(user_id)
            handle_start_or_main_menu(chat_id, message_id)
        
        # –î–æ–ø–æ–º–æ–≥–∞
        elif data == 'help':
            handle_help(chat_id, message_id)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        elif data == 'add_reminder':
            set_user_state(user_id, States.WAITING_FOR_TEXT)
            edit_message_text(chat_id, message_id, 
                             "üê± –ö–æ—Ç–∏–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!\n\nüìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", 
                             reply_markup=get_cancel_keyboard())
        
        # –í–∏–±—ñ—Ä —Ç–∏–ø—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        elif data == 'reminder_type_recurring':
            set_user_data(user_id, 'reminder_type', 'recurring')
            set_user_state(user_id, States.WAITING_FOR_TIME)
            edit_message_text(chat_id, message_id, 
                             "üîÅ –†–µ–≥—É–ª—è—Ä–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n\n‚è∞ –í–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30):", 
                             reply_markup=get_cancel_keyboard())
        
        elif data == 'reminder_type_onetime':
            set_user_data(user_id, 'reminder_type', 'one_time')
            set_user_state(user_id, States.WAITING_FOR_TIME)
            edit_message_text(chat_id, message_id, 
                             "üìå –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n\n‚è∞ –í–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30):", 
                             reply_markup=get_cancel_keyboard())
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
        elif data == 'list_reminders':
            handle_list_reminders(chat_id, message_id)
        
        # –î–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö
        elif data.startswith('days_'):
            state = get_user_state(user_id)
            if state == States.WAITING_FOR_DAYS:
                user_data_dict = get_user_data(user_id)
                
                if data == 'days_custom':
                    # –í–∏–±—ñ—Ä–∫–æ–≤—ñ –¥–Ω—ñ - –ø–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è
                    set_user_data(user_id, 'selected_days', [])
                    edit_message_text(chat_id, message_id,
                        "üê± –û–±–µ—Ä–∏ –¥–Ω—ñ —Ç–∏–∂–Ω—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n(–ú–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞)",
                        reply_markup=get_weekdays_keyboard())
                    return
                
                days_map = {
                    'days_weekdays': ('mon,tue,wed,thu,fri', '–ë—É–¥–Ω—ñ'),
                    'days_weekend': ('sat,sun', '–í–∏—Ö—ñ–¥–Ω—ñ'),
                    'days_daily': ('mon,tue,wed,thu,fri,sat,sun', '–©–æ–¥–Ω—è')
                }
                
                if data in days_map:
                    days, days_text = days_map[data]
                    
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute(
                        """INSERT INTO reminders (chat_id, text, hour, minute, days, one_time, reminder_type) 
                           VALUES (?, ?, ?, ?, ?, ?, ?)""",
                        (chat_id, user_data_dict['text'], user_data_dict['hour'], 
                         user_data_dict['minute'], days, 0, 'recurring')
                    )
                    conn.commit()
                    conn.close()
                    
                    edit_message_text(chat_id, message_id,
                        f"‚úÖ –ö–æ—Ç–∏–∫ —Å—Ç–≤–æ—Ä–∏–≤ —Ä–µ–≥—É–ª—è—Ä–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n"
                        f"üìù –¢–µ–∫—Å—Ç: {user_data_dict['text']}\n"
                        f"‚è∞ –ß–∞—Å: {user_data_dict['hour']:02d}:{user_data_dict['minute']:02d}\n"
                        f"üìÖ –î–Ω—ñ: {days_text} {get_days_emoji(days)}\n\n"
                        f"üê± –ö–æ—Ç–∏–∫ –±—É–¥–µ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏! üîÅ",
                        reply_markup=get_back_to_main_keyboard()
                    )
                    
                    clear_user_state(user_id)
        
        # –í–∏–±—ñ—Ä –æ–∫—Ä–µ–º–∏—Ö –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
        elif data.startswith('day_'):
            state = get_user_state(user_id)
            if state == States.WAITING_FOR_DAYS:
                day = data.split('_')[1]
                selected_days = get_user_data(user_id, 'selected_days') or []
                
                if day in selected_days:
                    selected_days.remove(day)
                else:
                    selected_days.append(day)
                
                set_user_data(user_id, 'selected_days', selected_days)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –¥–Ω—ñ
                keyboard = get_weekdays_keyboard()
                for row in keyboard['inline_keyboard']:
                    for button in row:
                        if button['callback_data'].startswith('day_'):
                            button_day = button['callback_data'].split('_')[1]
                            if button_day in selected_days:
                                button['text'] = '‚úÖ ' + button['text']
                
                selected_text = "–í–∏–±—Ä–∞–Ω—ñ –¥–Ω—ñ: " + ', '.join(selected_days) if selected_days else "–î–Ω—ñ –Ω–µ –≤–∏–±—Ä–∞–Ω—ñ"
                
                edit_message_text(chat_id, message_id,
                    f"üê± –û–±–µ—Ä–∏ –¥–Ω—ñ —Ç–∏–∂–Ω—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n\n{selected_text}",
                    reply_markup=keyboard)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –¥–Ω—ñ–≤
        elif data == 'days_selected':
            state = get_user_state(user_id)
            if state == States.WAITING_FOR_DAYS:
                selected_days = get_user_data(user_id, 'selected_days') or []
                
                if not selected_days:
                    edit_message_text(chat_id, message_id,
                        "üê± –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –¥–µ–Ω—å!\n\n–û–±–µ—Ä–∏ –¥–Ω—ñ —Ç–∏–∂–Ω—è:",
                        reply_markup=get_weekdays_keyboard())
                    return
                
                user_data_dict = get_user_data(user_id)
                days_string = ','.join(selected_days)
                
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute(
                    """INSERT INTO reminders (chat_id, text, hour, minute, days, one_time, reminder_type) 
                       VALUES (?, ?, ?, ?, ?, ?, ?)""",
                    (chat_id, user_data_dict['text'], user_data_dict['hour'], 
                     user_data_dict['minute'], days_string, 0, 'recurring')
                )
                conn.commit()
                conn.close()
                
                days_names = {'mon': '–ü–Ω', 'tue': '–í—Ç', 'wed': '–°—Ä', 'thu': '–ß—Ç', 'fri': '–ü—Ç', 'sat': '–°–±', 'sun': '–ù–¥'}
                days_text = ', '.join([days_names.get(day, day) for day in selected_days])
                
                edit_message_text(chat_id, message_id,
                    f"‚úÖ –ö–æ—Ç–∏–∫ —Å—Ç–≤–æ—Ä–∏–≤ —Ä–µ–≥—É–ª—è—Ä–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n"
                    f"üìù –¢–µ–∫—Å—Ç: {user_data_dict['text']}\n"
                    f"‚è∞ –ß–∞—Å: {user_data_dict['hour']:02d}:{user_data_dict['minute']:02d}\n"
                    f"üìÖ –î–Ω—ñ: {days_text} {get_days_emoji(days_string)}\n\n"
                    f"üê± –ö–æ—Ç–∏–∫ –±—É–¥–µ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏! üîÅ",
                    reply_markup=get_back_to_main_keyboard()
                )
                
                clear_user_state(user_id)
        
        # –ú–µ–Ω—é –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        elif data == 'birthdays_menu':
            edit_message_text(chat_id, message_id, 
                             "üéÇ –ö–æ—Ç–∏–∫ –∫–µ—Ä—É—î –¥–Ω—è–º–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!", 
                             reply_markup=get_birthday_keyboard())
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        elif data == 'add_birthday':
            set_user_state(user_id, States.WAITING_FOR_BIRTHDAY_NAME)
            edit_message_text(chat_id, message_id, 
                             "üê± –ö–æ—Ç–∏–∫ –≥–æ—Ç–æ–≤–∏–π –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!\n\nüéÇ –í–≤–µ–¥–∏ —ñ–º'—è –ª—é–¥–∏–Ω–∏:", 
                             reply_markup=get_cancel_keyboard())
        
        # –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        elif data == 'list_birthdays':
            handle_list_birthdays(chat_id, message_id)
        
        # –ú–µ–Ω—é —Ä–æ–∑–∫–ª–∞–¥—É
        elif data == 'schedule_menu':
            edit_message_text(chat_id, message_id, 
                             "üìÖ –ö–æ—Ç–∏–∫ –ø–æ–∫–∞–∂–µ —Ä–æ–∑–∫–ª–∞–¥!", 
                             reply_markup=get_schedule_keyboard())
        
        # –†–æ–∑–∫–ª–∞–¥ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
        elif data.startswith('schedule_'):
            period = data.split('_')[1]
            
            conn = get_db_connection()
            cursor = conn.cursor()
            
            now = datetime.now()
            
            if period == 'today':
                day_name = calendar.day_name[now.weekday()].lower()[:3]
                today_str = now.strftime('%Y-%m-%d')
                
                # –†–µ–≥—É–ª—è—Ä–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                cursor.execute("""
                    SELECT * FROM reminders 
                    WHERE chat_id=? AND is_active=1 AND reminder_type='recurring'
                    AND (days LIKE ? OR days LIKE ?)
                    ORDER BY hour, minute
                """, (chat_id, f'%{day_name}%', '%mon,tue,wed,thu,fri,sat,sun%'))
                recurring = cursor.fetchall()
                
                # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
                cursor.execute("""
                    SELECT * FROM reminders 
                    WHERE chat_id=? AND is_active=1 AND reminder_type='one_time'
                    AND specific_date=?
                    ORDER BY hour, minute
                """, (chat_id, today_str))
                onetime = cursor.fetchall()
                
                title = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({now.strftime('%d.%m.%Y')})"
                
            elif period == 'tomorrow':
                tomorrow = now + timedelta(days=1)
                day_name = calendar.day_name[tomorrow.weekday()].lower()[:3]
                tomorrow_str = tomorrow.strftime('%Y-%m-%d')
                
                cursor.execute("""
                    SELECT * FROM reminders 
                    WHERE chat_id=? AND is_active=1 AND reminder_type='recurring'
                    AND (days LIKE ? OR days LIKE ?)
                    ORDER BY hour, minute
                """, (chat_id, f'%{day_name}%', '%mon,tue,wed,thu,fri,sat,sun%'))
                recurring = cursor.fetchall()
                
                cursor.execute("""
                    SELECT * FROM reminders 
                    WHERE chat_id=? AND is_active=1 AND reminder_type='one_time'
                    AND specific_date=?
                    ORDER BY hour, minute
                """, (chat_id, tomorrow_str))
                onetime = cursor.fetchall()
                
                title = f"üìÜ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')})"
                
            elif period == 'week':
                cursor.execute("""
                    SELECT * FROM reminders 
                    WHERE chat_id=? AND is_active=1
                    ORDER BY reminder_type, hour, minute
                """, (chat_id,))
                all_reminders = cursor.fetchall()
                recurring = [r for r in all_reminders if len(r) > 7 and r[7] == 'recurring']
                onetime = [r for r in all_reminders if len(r) > 7 and r[7] == 'one_time']
                title = "üóìÔ∏è –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å"
                
            elif period == 'month':
                cursor.execute("""
                    SELECT * FROM reminders 
                    WHERE chat_id=? AND is_active=1
                    ORDER BY reminder_type, hour, minute
                """, (chat_id,))
                all_reminders = cursor.fetchall()
                recurring = [r for r in all_reminders if len(r) > 7 and r[7] == 'recurring']
                onetime = [r for r in all_reminders if len(r) > 7 and r[7] == 'one_time']
                title = "üìä –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –º—ñ—Å—è—Ü—å"
            
            conn.close()
            
            if not recurring and not onetime:
                text = f"{title}\n\nüê± –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.\n–ö–æ—Ç–∏–∫ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –¥–æ–¥–∞—Ç–∏!"
                keyboard = {
                    'inline_keyboard': [
                        [{'text': '‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'callback_data': 'add_reminder'}],
                        [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'schedule_menu'}]
                    ]
                }
            else:
                text = f"{title}\n\n"
                
                all_reminders = list(recurring) + list(onetime)
                all_reminders.sort(key=lambda x: (x[3], x[4]))  # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
                
                for r in all_reminders:
                    reminder_type = r[7] if len(r) > 7 else 'recurring'
                    type_emoji = "üîÅ" if reminder_type == 'recurring' else "üìå"
                    
                    text += f"{type_emoji} {r[3]:02d}:{r[4]:02d} - {r[2]}\n"
                    
                    if reminder_type == 'recurring' and r[5]:
                        days_emoji = get_days_emoji(r[5])
                        text += f"üìÖ {r[5]} {days_emoji}\n"
                    elif reminder_type == 'one_time' and len(r) > 8 and r[8]:
                        try:
                            date_obj = datetime.strptime(r[8], '%Y-%m-%d')
                            text += f"üìÖ {date_obj.strftime('%d.%m.%Y')}\n"
                        except:
                            pass
                    
                    text += "\n"
                
                keyboard = {
                    'inline_keyboard': [
                        [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'schedule_menu'}]
                    ]
                }
            
            edit_message_text(chat_id, message_id, text, reply_markup=keyboard)
        
        # –ú–µ–Ω—é —Ñ–æ—Ç–æ
        elif data == 'photos_menu':
            edit_message_text(chat_id, message_id, 
                             "üì∏ –ö–æ—Ç–∏–∫ –∫–µ—Ä—É—î —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É!", 
                             reply_markup=get_photos_keyboard())
        
        # –ü–µ—Ä–µ–≥–ª—è–¥ —Ñ–æ—Ç–æ
        elif data == 'view_photos':
            handle_view_photos(chat_id, message_id)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
        elif data == 'add_photo_info':
            edit_message_text(chat_id, message_id, 
                             "üì∏ –ö–æ—Ç–∏–∫ –≥–æ—Ç–æ–≤–∏–π –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ!\n\n"
                             "üê± –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É, —ñ –∫–æ—Ç–∏–∫ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∏–±—Ä–∞—Ç–∏ —Ç–∏–ø.", 
                             reply_markup=get_back_to_main_keyboard())
        
        # –í–∏–±—ñ—Ä —Ç–∏–ø—É —Ñ–æ—Ç–æ
        elif data.startswith('photo_type_'):
            photo_type = data.split('_')[2]
            photo_file_id = get_user_data(user_id, 'photo_file_id')
            
            if photo_file_id:
                set_user_data(user_id, 'photo_type', photo_type)
                set_user_state(user_id, States.WAITING_FOR_PHOTO_TYPE)
                
                type_names = {'day': '–¥–µ–Ω—å', 'week': '—Ç–∏–∂–¥–µ–Ω—å', 'month': '–º—ñ—Å—è—Ü—å'}
                edit_message_text(chat_id, message_id,
                    f"üì∏ –¢–∏–ø —Ñ–æ—Ç–æ: {type_names.get(photo_type, photo_type)}\n\n"
                    f"üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å –¥–ª—è —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫'):",
                    reply_markup=get_cancel_keyboard())
        
        answer_callback_query(callback_query['id'])
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback –∑–∞–ø–∏—Ç—É: {e}")
        try:
            answer_callback_query(callback_query['id'], "‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è")
        except:
            pass

# --- –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ ---
def handle_photo(message):
    try:
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        photo = message['photo'][-1]  # –ù–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ file_id —Ñ–æ—Ç–æ
        set_user_data(user_id, 'photo_file_id', photo['file_id'])
        
        keyboard = get_photo_type_keyboard()
        
        send_message(chat_id, "üì∏ –ö–æ—Ç–∏–∫ –æ—Ç—Ä–∏–º–∞–≤ —Ñ–æ—Ç–æ!\n\nüê± –î–ª—è —è–∫–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —Ü–µ —Ä–æ–∑–∫–ª–∞–¥?", 
                    reply_markup=keyboard)
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")
        send_message(message['chat']['id'], "‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ.", 
                    reply_markup=get_back_to_main_keyboard())

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ---
def handle_delete_reminder(message):
    try:
        chat_id = message['chat']['id']
        args_text = message['text'].replace('/delete', '').strip()
        if not args_text:
            send_message(chat_id, "üê± –ö–æ—Ç–∏–∫ –Ω–µ —Ä–æ–∑—É–º—ñ—î.\n\n‚ùå –í–∫–∞–∂–∏ ID –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: /delete 123", 
                        reply_markup=get_back_to_main_keyboard())
            return
        
        reminder_id = int(args_text)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders WHERE id=? AND chat_id=?", 
                      (reminder_id, chat_id))
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()
        
        if deleted_count > 0:
            send_message(chat_id, f"‚úÖ –ö–æ—Ç–∏–∫ –≤–∏–¥–∞–ª–∏–≤ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder_id}.", 
                        reply_markup=get_back_to_main_keyboard())
        else:
            send_message(chat_id, "‚ùå –ö–æ—Ç–∏–∫ –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.", 
                        reply_markup=get_back_to_main_keyboard())
            
    except ValueError:
        send_message(chat_id, "‚ùå ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.", 
                    reply_markup=get_back_to_main_keyboard())
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
        send_message(chat_id, f"‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è: {str(e)}", 
                    reply_markup=get_back_to_main_keyboard())

def handle_delete_birthday(message):
    try:
        chat_id = message['chat']['id']
        args_text = message['text'].replace('/delete_birthday', '').strip()
        if not args_text:
            send_message(chat_id, "üê± –ö–æ—Ç–∏–∫ –Ω–µ —Ä–æ–∑—É–º—ñ—î.\n\n‚ùå –í–∫–∞–∂–∏ ID –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: /delete_birthday 123", 
                        reply_markup=get_back_to_main_keyboard())
            return
        
        birthday_id = int(args_text)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM birthdays WHERE id=? AND chat_id=?", 
                      (birthday_id, chat_id))
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()
        
        if deleted_count > 0:
            send_message(chat_id, f"‚úÖ –ö–æ—Ç–∏–∫ –≤–∏–¥–∞–ª–∏–≤ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {birthday_id}.", 
                        reply_markup=get_back_to_main_keyboard())
        else:
            send_message(chat_id, "‚ùå –ö–æ—Ç–∏–∫ –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.", 
                        reply_markup=get_back_to_main_keyboard())
            
    except ValueError:
        send_message(chat_id, "‚ùå ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.", 
                    reply_markup=get_back_to_main_keyboard())
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {e}")
        send_message(chat_id, f"‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è: {str(e)}", 
                    reply_markup=get_back_to_main_keyboard())

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
def handle_message(message):
    try:
        text = message.get('text', '')
        user_id = message['from']['id']
        chat_id = message['chat']['id']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if get_user_state(user_id):
            handle_state_message(message)
            return
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if text in ['/start', '/menu']:
            handle_start_or_main_menu(chat_id)
        elif text in ['/help', '–¥–æ–ø–æ–º–æ–≥–∞', '–î–æ–ø–æ–º–æ–≥–∞', '–ø–æ–º–æ—â—å', '–ü–æ–º–æ—â—å']:
            handle_help(chat_id)
        elif text.startswith('/delete_birthday'):
            handle_delete_birthday(message)
        elif text.startswith('/delete'):
            handle_delete_reminder(message)
        else:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ –∑–∞–ø–∏—Ç –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é
            ai_response = ai_processor.process_natural_message(text, chat_id)
            
            if ai_response:
                send_message(chat_id, ai_response, 
                           reply_markup=get_back_to_main_keyboard(), 
                           parse_mode='Markdown')
            else:
                # –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
                send_message(chat_id, 
                    "üê± –ö–æ—Ç–∏–∫ –Ω–µ —Ä–æ–∑—É–º—ñ—î —Ü—é –∫–æ–º–∞–Ω–¥—É.\n\n"
                    "–°–ø—Ä–æ–±—É–π –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏!\n\n"
                    "**–ê–±–æ —Å–ø–∏—Ç–∞–π –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é:**\n"
                    "‚Ä¢ \"–∫–æ—Ç–∏–∫—É, —â–æ —É –º–µ–Ω–µ —Å—å–æ–≥–æ–¥–Ω—ñ?\"\n"
                    "‚Ä¢ \"–ø–æ–∫–∞–∂–∏ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\"\n"
                    "‚Ä¢ \"—è–∫—ñ —Å–ø—Ä–∞–≤–∏ –Ω–∞ 15.03?\"\n"
                    "‚Ä¢ \"–¥–æ–¥–∞–π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–≤—Ç—Ä–∞ –æ 15:00\"",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        send_message(message['chat']['id'], "‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", 
                    reply_markup=get_main_menu_keyboard())

# --- –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞ ---
def get_updates(offset=None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram"""
    url = f"{BASE_URL}/getUpdates"
    params = {'timeout': 30, 'offset': offset}
    
    try:
        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"HTTP Error {response.status_code}: {response.text}")
            return None
    except requests.exceptions.Timeout:
        logger.warning("Timeout –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω—å")
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å: {e}")
        return None

def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    logger.info("üê± –ö–æ—Ç–∏–∫-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    init_db()
    start_reminder_thread()
    
    logger.info("‚úÖ –ö–æ—Ç–∏–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    
    offset = None
    consecutive_errors = 0
    
    while True:
        try:
            updates = get_updates(offset)
            
            if updates and updates.get('ok'):
                consecutive_errors = 0
                
                for update in updates['result']:
                    try:
                        offset = update['update_id'] + 1
                        
                        if 'message' in update:
                            message = update['message']
                            
                            # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
                            if 'photo' in message:
                                handle_photo(message)
                            # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                            elif 'text' in message:
                                handle_message(message)
                        
                        elif 'callback_query' in update:
                            handle_callback_query(update['callback_query'])
                            
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ update {update.get('update_id', 'unknown')}: {e}")
                        continue
            else:
                consecutive_errors += 1
                if consecutive_errors > 5:
                    logger.error("–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫ –ø–æ—Å–ø—ñ–ª—å, –∑–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É")
                    time.sleep(10)
                    consecutive_errors = 0
            
            time.sleep(0.1)
            
        except KeyboardInterrupt:
            logger.info("üê± –ö–æ—Ç–∏–∫ –π–¥–µ —Å–ø–∞—Ç–∏...")
            global stop_reminders
            stop_reminders = True
            if reminders_thread and reminders_thread.is_alive():
                reminders_thread.join(timeout=5)
            logger.info("‚úÖ –ö–æ—Ç–∏–∫ –∑–∞—Å–Ω—É–≤")
            break
        except Exception as e:
            logger.error(f"‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è: {e}")
            consecutive_errors += 1
            sleep_time = min(5 * consecutive_errors, 60)
            time.sleep(sleep_time)

if __name__ == "__main__":
    try:
        run_bot()
    except Exception as e:
        logger.error(f"‚ùå –ö–æ—Ç–∏–∫ —Å–∏–ª—å–Ω–æ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è: {e}")
stop_reminders = False

# –°—Ç–∞–Ω–∏ FSM
class States:
    WAITING_FOR_TEXT = "waiting_for_text"
    WAITING_FOR_TIME = "waiting_for_time"
    WAITING_FOR_DAYS = "waiting_for_days"
    WAITING_FOR_SPECIFIC_DAYS = "waiting_for_specific_days"
    WAITING_FOR_BIRTHDAY_NAME = "waiting_for_birthday_name"
    WAITING_FOR_BIRTHDAY_DATE = "waiting_for_birthday_date"
    WAITING_FOR_PHOTO_TYPE = "waiting_for_photo_type"
    WAITING_FOR_REMINDER_TYPE = "waiting_for_reminder_type"

# --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö ---
def init_db():
    try:
        conn = sqlite3.connect("reminders.db")
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            text TEXT,
            hour INTEGER,
            minute INTEGER,
            days TEXT,
            one_time INTEGER,
            reminder_type TEXT DEFAULT 'recurring',
            specific_date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active INTEGER DEFAULT 1
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü—è —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS schedule_photos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            photo_file_id TEXT,
            schedule_type TEXT,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü—è –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS birthdays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            name TEXT,
            birth_date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")

def get_db_connection():
    return sqlite3.connect("reminders.db")

# --- –†–æ–∑—à–∏—Ä–µ–Ω–∞ –®–Ü –æ–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏ ---
class AIMessageProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é"""
    
    def __init__(self):
        self.date_patterns = [
            r'(\d{1,2})\.(\d{1,2})\.?(\d{0,4})?',  # 01.01 –∞–±–æ 01.01.2024
            r'(\d{1,2})/(\d{1,2})/(\d{2,4})',      # 01/01/24
            r'(\d{1,2})-(\d{1,2})-?(\d{0,4})?',    # 01-01 –∞–±–æ 01-01-2024
        ]
        
        self.time_patterns = [
            r'(\d{1,2}):(\d{2})',                   # 14:30
            r'(\d{1,2})\.(\d{2})',                  # 14.30
            r'–æ?(\d{1,2}) –≥–æ–¥(?:–∏–Ω[–∏–∞])?',          # 14 –≥–æ–¥, –æ 14 –≥–æ–¥–∏–Ω—ñ
            r'–≤ (\d{1,2}):(\d{2})',                 # –≤ 14:30
        ]
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        self.schedule_keywords = [
            '—Ä–æ–∑–∫–ª–∞–¥', 'schedule', '–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ', '–ø–ª–∞–Ω', '—â–æ —É –º–µ–Ω–µ', '—â–æ –≤ –º–µ–Ω–µ',
            '–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', '—Å–ø—Ä–∞–≤–∏', '–¥—ñ–ª–∞', '–∑–∞–≤–¥–∞–Ω–Ω—è', '–ø–æ–¥—ñ—è', '–ø–æ–¥—ñ—ó', '–∑—É—Å—Ç—Ä—ñ—á'
        ]
        
        self.add_keywords = [
            '–¥–æ–¥–∞–π', '–¥–æ–±–∞–≤—å', '—Å—Ç–≤–æ—Ä–∏', '–Ω–∞–≥–∞–¥–∞–π', '–∑–∞–ø–ª–∞–Ω—ñ–π', '–∑—Ä–æ–±–∏—Ç–∏',
            '—Ç—Ä–µ–±–∞', '–ø–æ—Ç—Ä—ñ–±–Ω–æ', '–Ω–µ –∑–∞–±—É—Ç–∏', '–≤–∞–∂–ª–∏–≤–æ'
        ]
        
        self.birthday_keywords = [
            '–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', '–¥—Ä', 'birthday', '–Ω–∞—Ä–æ–¥–∏–≤—Å—è', '–Ω–∞—Ä–æ–¥–∏–ª–∞—Å—è'
        ]
        
        self.today_keywords = [
            '—Å—å–æ–≥–æ–¥–Ω—ñ', 'today', '–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', '—Ü—å–æ–≥–æ –¥–Ω—è', '–∑–∞—Ä–∞–∑'
        ]
        
        self.tomorrow_keywords = [
            '–∑–∞–≤—Ç—Ä–∞', 'tomorrow', '–Ω–∞ –∑–∞–≤—Ç—Ä–∞'
        ]
        
        self.week_days = {
            '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫': 'mon', 'monday': 'mon', '–ø–Ω': 'mon',
            '–≤—ñ–≤—Ç–æ—Ä–æ–∫': 'tue', 'tuesday': 'tue', '–≤—Ç': 'tue',
            '—Å–µ—Ä–µ–¥–∞': 'wed', 'wednesday': 'wed', '—Å—Ä': 'wed',
            '—á–µ—Ç–≤–µ—Ä': 'thu', 'thursday': 'thu', '—á—Ç': 'thu',
            '–ø\'—è—Ç–Ω–∏—Ü—è': 'fri', 'friday': 'fri', '–ø—Ç': 'fri',
            '—Å—É–±–æ—Ç–∞': 'sat', 'saturday': 'sat', '—Å–±': 'sat',
            '–Ω–µ–¥—ñ–ª—è': 'sun', 'sunday': 'sun', '–Ω–¥': 'sun'
        }
        
        # –§—Ä–∞–∑–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        self.delete_keywords = [
            '–≤–∏–¥–∞–ª–∏', '—É–¥–∞–ª–∏', 'delete', '–ø—Ä–∏–±–µ—Ä–∏', '—Å–∫–∞—Å—É–π'
        ]
    
    def extract_date(self, text):
        """–í–∏—Ç—è–≥—É—î –¥–∞—Ç—É –∑ —Ç–µ–∫—Å—Ç—É"""
        for pattern in self.date_patterns:
            match = re.search(pattern, text)
            if match:
                day, month = int(match.group(1)), int(match.group(2))
                year = None
                if match.group(3) and len(match.group(3)) > 0:
                    year_str = match.group(3)
                    if len(year_str) == 2:
                        year = 2000 + int(year_str)
                    else:
                        year = int(year_str)
                
                try:
                    if year:
                        return datetime(year, month, day)
                    else:
                        current_year = datetime.now().year
                        date = datetime(current_year, month, day)
                        if date < datetime.now().replace(hour=0, minute=0, second=0, microsecond=0):
                            date = datetime(current_year + 1, month, day)
                        return date
                except ValueError:
                    continue
        return None
    
    def extract_time(self, text):
        """–í–∏—Ç—è–≥—É—î —á–∞—Å –∑ —Ç–µ–∫—Å—Ç—É"""
        for pattern in self.time_patterns:
            match = re.search(pattern, text)
            if match:
                if len(match.groups()) == 2:
                    hour = int(match.group(1))
                    minute = int(match.group(2))
                else:
                    hour = int(match.group(1))
                    minute = 0
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    return hour, minute
        return None
    
    def extract_weekday(self, text):
        """–í–∏—Ç—è–≥—É—î –¥–µ–Ω—å —Ç–∏–∂–Ω—è –∑ —Ç–µ–∫—Å—Ç—É"""
        text_lower = text.lower()
        for day_name, day_code in self.week_days.items():
            if day_name in text_lower:
                return day_code
        return None
    
    def is_schedule_request(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑–∫–ª–∞–¥"""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.schedule_keywords)
    
    def is_add_request(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.add_keywords)
    
    def is_birthday_request(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ü–µ –∑–∞–ø–∏—Ç –ø—Ä–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.birthday_keywords)
    
    def is_delete_request(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.delete_keywords)
    
    def get_date_context(self, text):
        """–í–∏–∑–Ω–∞—á–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞—Ç–∏"""
        text_lower = text.lower()
        
        if any(keyword in text_lower for keyword in self.today_keywords):
            return datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        
        if any(keyword in text_lower for keyword in self.tomorrow_keywords):
            return (datetime.now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–µ–Ω—å —Ç–∏–∂–Ω—è
        weekday = self.extract_weekday(text)
        if weekday:
            return self.get_next_weekday_date(weekday)
        
        return self.extract_date(text)
    
    def get_next_weekday_date(self, target_day):
        """–û—Ç—Ä–∏–º—É—î –¥–∞—Ç—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –¥–Ω—è —Ç–∏–∂–Ω—è"""
        days_order = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
        current_day = datetime.now().weekday()
        target_index = days_order.index(target_day)
        
        days_ahead = (target_index - current_day) % 7
        if days_ahead == 0:
            days_ahead = 7
            
        return datetime.now() + timedelta(days=days_ahead)
    
    def process_natural_message(self, text, chat_id):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤
        if self.is_delete_request(text):
            return self.handle_delete_request(text, chat_id)
        
        if self.is_add_request(text):
            return self.handle_add_request(text, chat_id)
        
        if self.is_birthday_request(text):
            return self.handle_birthday_request(text, chat_id)
        
        if self.is_schedule_request(text):
            target_date = self.get_date_context(text)
            if target_date:
                return self.get_schedule_for_date(chat_id, target_date)
            else:
                return self.get_general_schedule(chat_id)
        
        return None
    
    def handle_add_request(self, text, chat_id):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"""
        time_info = self.extract_time(text)
        date_info = self.get_date_context(text)
        
        if time_info and date_info:
            # –ú–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            reminder_text = self.extract_reminder_text(text)
            if reminder_text:
                try:
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    
                    hour, minute = time_info
                    date_str = date_info.strftime('%Y-%m-%d')
                    
                    cursor.execute("""
                        INSERT INTO reminders (chat_id, text, hour, minute, days, one_time, reminder_type, specific_date)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (chat_id, reminder_text, hour, minute, '', 1, 'one_time', date_str))
                    
                    conn.commit()
                    conn.close()
                    
                    return (f"‚úÖ –ö–æ—Ç–∏–∫ –¥–æ–¥–∞–≤ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n"
                           f"üìù {reminder_text}\n"
                           f"‚è∞ {hour:02d}:{minute:02d}\n"
                           f"üìÖ {date_info.strftime('%d.%m.%Y')}")
                
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
                    return "‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è."
        
        return "üê± –ö–æ—Ç–∏–∫ —Ä–æ–∑—É–º—ñ—î, —â–æ —Ç—Ä–µ–±–∞ —â–æ—Å—å –¥–æ–¥–∞—Ç–∏, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–µ–Ω—é!"
    
    def extract_reminder_text(self, text):
        """–í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        clean_text = text
        for keyword in self.add_keywords:
            clean_text = re.sub(r'\b' + keyword + r'\b', '', clean_text, flags=re.IGNORECASE)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —á–∞—Å —Ç–∞ –¥–∞—Ç—É
        for pattern in self.time_patterns + self.date_patterns:
            clean_text = re.sub(pattern, '', clean_text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥–Ω—ñ —Ç–∏–∂–Ω—è
        for day_name in self.week_days.keys():
            clean_text = re.sub(r'\b' + day_name + r'\b', '', clean_text, flags=re.IGNORECASE)
        
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        return clean_text if len(clean_text) > 3 else None
    
    def handle_birthday_request(self, text, chat_id):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM birthdays WHERE chat_id=? ORDER BY name", (chat_id,))
        birthdays = cursor.fetchall()
        conn.close()
        
        if not birthdays:
            return "üéÇ –£ –∫–æ—Ç–∏–∫–∞ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. –î–æ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é?"
        
        response = "üéÇ **–î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:**\n\n"
        for b in birthdays:
            birthday_id, _, name, birth_date = b[:4]
            month, day = map(int, birth_date.split('-'))
            response += f"üîπ {name} - {day:02d}.{month:02d}\n"
        
        return response
    
    def handle_delete_request(self, text, chat_id):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
        return "üóëÔ∏è –î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏:\n/delete [ID] - –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n/delete_birthday [ID] - –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"
    
    def get_schedule_for_date(self, chat_id, target_date):
        """–û—Ç—Ä–∏–º—É—î —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É"""
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            
            day_name = calendar.day_name[target_date.weekday()].lower()[:3]
            date_str = target_date.strftime('%Y-%m-%d')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —Ü–µ–π –¥–µ–Ω—å
            cursor.execute("""
                SELECT * FROM reminders 
                WHERE chat_id=? AND is_active=1 AND reminder_type='recurring'
                AND (days LIKE ? OR days LIKE ?)
                ORDER BY hour, minute
            """, (chat_id, f'%{day_name}%', '%mon,tue,wed,thu,fri,sat,sun%'))
            
            recurring_reminders = cursor.fetchall()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —Ü—é –¥–∞—Ç—É
            cursor.execute("""
                SELECT * FROM reminders 
                WHERE chat_id=? AND is_active=1 AND reminder_type='one_time'
                AND specific_date=?
                ORDER BY hour, minute
            """, (chat_id, date_str))
            
            one_time_reminders = cursor.fetchall()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ü—é –¥–∞—Ç—É
            date_format = f"{target_date.month:02d}-{target_date.day:02d}"
            cursor.execute("""
                SELECT * FROM birthdays 
                WHERE chat_id=? AND birth_date=?
            """, (chat_id, date_format))
            
            birthdays = cursor.fetchall()
            conn.close()
            
            # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            date_formatted = target_date.strftime('%d.%m.%Y')
            day_name_uk = self.get_day_name_ukrainian(target_date.weekday())
            
            response = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ {date_formatted} ({day_name_uk}):\n\n"
            
            all_reminders = list(recurring_reminders) + list(one_time_reminders)
            all_reminders.sort(key=lambda x: (x[3], x[4]))  # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
            
            if all_reminders:
                response += "‚è∞ **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**\n"
                for r in all_reminders:
                    type_icon = "üîÅ" if len(r) > 7 and r[7] == 'recurring' else "üìå"
                    response += f"{type_icon} {r[3]:02d}:{r[4]:02d} - {r[2]}\n"
                response += "\n"
            
            if birthdays:
                response += "üéÇ **–î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:**\n"
                for b in birthdays:
                    response += f"üéâ {b[2]}\n"
                response += "\n"
            
            if not all_reminders and not birthdays:
                response += "üê± –ù–∞ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.\n–ö–æ—Ç–∏–∫ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –¥–æ–¥–∞—Ç–∏ —â–æ—Å—å –Ω–æ–≤–µ!"
            
            return response
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É: {e}")
            return "‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è –ø—Ä–∏ –ø–æ—à—É–∫—É —Ä–æ–∑–∫–ª–∞–¥—É."
    
    def get_general_schedule(self, chat_id):
        """–û—Ç—Ä–∏–º—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥"""
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT * FROM reminders 
                WHERE chat_id=? AND is_active=1
                ORDER BY reminder_type, hour, minute
                LIMIT 15
            """, (chat_id,))
            
            reminders = cursor.fetchall()
            conn.close()
            
            if not reminders:
                return "üê± –£ –∫–æ—Ç–∏–∫–∞ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.\n–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é!"
            
            response = "üìã **–¢–≤–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**\n\n"
            
            recurring = [r for r in reminders if len(r) > 7 and r[7] == 'recurring']
            one_time = [r for r in reminders if len(r) > 7 and r[7] == 'one_time']
            
            if recurring:
                response += "üîÅ **–†–µ–≥—É–ª—è—Ä–Ω—ñ:**\n"
                for r in recurring:
                    days_emoji = get_days_emoji(r[5])
                    response += f"‚è∞ {r[3]:02d}:{r[4]:02d} - {r[2]}\n"
                    if r[5]:
                        response += f"üìÖ {r[5]} {days_emoji}\n"
                    response += "\n"
            
            if one_time:
                response += "üìå **–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ:**\n"
                for r in one_time:
                    specific_date = ""
                    if len(r) > 8 and r[8]:
                        try:
                            date_obj = datetime.strptime(r[8], '%Y-%m-%d')
                            specific_date = f" ({date_obj.strftime('%d.%m.%Y')})"
                        except:
                            pass
                    response += f"‚è∞ {r[3]:02d}:{r[4]:02d} - {r[2]}{specific_date}\n\n"
            
            return response
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É: {e}")
            return "‚ùå –ö–æ—Ç–∏–∫ —Å–ø—ñ—Ç–∫–Ω—É–≤—Å—è –ø—Ä–∏ –ø–æ—à—É–∫—É —Ä–æ–∑–∫–ª–∞–¥—É."
    
    def get_day_name_ukrainian(self, weekday):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –¥–Ω—è —Ç–∏–∂–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        days = ['–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä', "–ø'—è—Ç–Ω–∏—Ü—è", '—Å—É–±–æ—Ç–∞', '–Ω–µ–¥—ñ–ª—è']
        return days[weekday]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AI –ø—Ä–æ—Ü–µ—Å–æ—Ä
ai_processor = AIMessageProcessor()

# --- Telegram API —Ñ—É–Ω–∫—Ü—ñ—ó ---
def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        if len(text) > 4096:
            text = text[:4093] + "..."
        
        data = {
            'chat_id': chat_id,
            'text': text
        }
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        if parse_mode:
            data['parse_mode'] = parse_mode
            
        response = requests.post(f"{BASE_URL}/sendMessage", data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return None

def send_photo(chat_id, photo_file_id, caption=None, reply_markup=None):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ"""
    try:
        data = {
            'chat_id': chat_id,
            'photo': photo_file_id
        }
        if caption:
            data['caption'] = caption[:1024]
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
            
        response = requests.post(f"{BASE_URL}/sendPhoto", data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
        return None

def edit_message_text(chat_id, message_id, text, reply_markup=None, parse_mode=None):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        if len(text) > 4096:
            text = text[:4093] + "..."
            
        data = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text
        }
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        if parse_mode:
            data['parse_mode'] = parse_mode
            
        response = requests.post(f"{BASE_URL}/editMessageText", data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return None

def answer_callback_query(callback_query_id, text=None):
    """–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback query"""
    try:
        data = {'callback_query_id': callback_query_id}
        if text:
            data['text'] = text
        response = requests.post(f"{BASE_URL}/answerCallbackQuery", data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback: {e}")
        return None

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ---
def get_main_menu_keyboard():
    return {
        'inline_keyboard': [
            [{'text': '‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'callback_data': 'add_reminder'}],
            [{'text': 'üìù –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'callback_data': 'list_reminders'}],
            [{'text': 'üéÇ –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', 'callback_data': 'birthdays_menu'}],
            [{'text': 'üìÖ –†–æ–∑–∫–ª–∞–¥', 'callback_data': 'schedule_menu'}],
            [{'text': 'üì∏ –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É', 'callback_data': 'photos_menu'}],
            [{'text': '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞', 'callback_data': 'help'}]
        ]
    }

def get_reminder_type_keyboard():
    return {
        'inline_keyboard': [
            [{'text': 'üîÅ –†–µ–≥—É–ª—è—Ä–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'callback_data': 'reminder_type_recurring'}],
            [{'text': 'üìå –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'callback_data': 'reminder_type_onetime'}],
            [{'text': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'callback_data': 'main_menu'}]
        ]
    }

def get_schedule_keyboard():
    return {
        'inline_keyboard': [
            [{'text': 'üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', 'callback_data': 'schedule_today'},
             {'text': 'üìÜ –ó–∞–≤—Ç—Ä–∞', 'callback_data': 'schedule_tomorrow'}],
            [{'text': 'üóìÔ∏è –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å', 'callback_data': 'schedule_week'},
             {'text': 'üìä –¶–µ–π –º—ñ—Å—è—Ü—å', 'callback_data': 'schedule_month'}],
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}]
        ]
    }

def get_days_keyboard():
    return {
        'inline_keyboard': [
            [{'text': '–ë—É–¥–Ω—ñ', 'callback_data': 'days_weekdays'},
             {'text': '–í–∏—Ö—ñ–¥–Ω—ñ', 'callback_data': 'days_weekend'}],
            [{'text': '–©–æ–¥–Ω—è', 'callback_data': 'days_daily'}],
            [{'text': '–í–∏–±—ñ—Ä–∫–æ–≤—ñ –¥–Ω—ñ', 'callback_data': 'days_custom'}],
            [{'text': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'callback_data': 'main_menu'}]
        ]
    }

def get_weekdays_keyboard():
    return {
        'inline_keyboard': [
            [{'text': '–ü–Ω', 'callback_data': 'day_mon'}, 
             {'text': '–í—Ç', 'callback_data': 'day_tue'}, 
             {'text': '–°—Ä', 'callback_data': 'day_wed'}],
            [{'text': '–ß—Ç', 'callback_data': 'day_thu'}, 
             {'text': '–ü—Ç', 'callback_data': 'day_fri'}, 
             {'text': '–°–±', 'callback_data': 'day_sat'}],
            [{'text': '–ù–¥', 'callback_data': 'day_sun'}],
            [{'text': '‚úÖ –ì–æ—Ç–æ–≤–æ', 'callback_data': 'days_selected'}, 
             {'text': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'callback_data': 'main_menu'}]
        ]
    }

def get_birthday_keyboard():
    return {
        'inline_keyboard': [
            [{'text': '‚ûï –î–æ–¥–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', 'callback_data': 'add_birthday'}],
            [{'text': 'üìù –ú–æ—ó –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', 'callback_data': 'list_birthdays'}],
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}]
        ]
    }

def get_photos_keyboard():
    return {
        'inline_keyboard': [
            [{'text': 'üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–æ—Ç–æ', 'callback_data': 'view_photos'}],
            [{'text': '‚ûï –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ', 'callback_data': 'add_photo_info'}],
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}]
        ]
    }

def get_photo_type_keyboard():
    return {
        'inline_keyboard': [
            [{'text': 'üìÖ –î–µ–Ω—å', 'callback_data': 'photo_type_day'},
             {'text': 'üóìÔ∏è –¢–∏–∂–¥–µ–Ω—å', 'callback_data': 'photo_type_week'}],
            [{'text': 'üìä –ú—ñ—Å—è—Ü—å', 'callback_data': 'photo_type_month'}],
            [{'text': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'callback_data': 'photos_menu'}]
        ]
    }

def get_cancel_keyboard():
    return {
        'inline_keyboard': [
            [{'text': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'callback_data': 'main_menu'}]
        ]
    }

def get_back_to_main_keyboard():
    return {
        'inline_keyboard': [
            [{'text': 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
        ]
    }

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def get_days_emoji(days_str):
    days_map = {
        'mon': 'üü¢', 'tue': 'üü°', 'wed': 'üîµ', 'thu': 'üü†', 
        'fri': 'üî¥', 'sat': 'üü£', 'sun': '‚ö™'
    }
    if not days_str:
        return ""
